plugins {
  id 'groovy'
  id 'java-library'
  id 'signing'
  id 'maven-publish'
  id 'io.github.gradle-nexus.publish-plugin' version '1.3.0'
  id "com.github.ben-manes.versions" version "0.48.0"
}

group 'se.alipsa.groovy'
version '1.0.0-SNAPSHOT'
description = "Groovy library for importing and exporting json to and from a Matrix or Grid"


java {
  toolchain {
    languageVersion = JavaLanguageVersion.of(17)
  }
}

repositories {
  if (version.contains('SNAPSHOT')) {
    mavenLocal()
  }
  mavenCentral()
}

dependencies {
  def groovyVersion = '4.0.15'
  def groovy = "org.apache.groovy:groovy:$groovyVersion"
  def matrixVersion = "1.1.3-SNAPSHOT"
  compileOnly "se.alipsa.groovy:matrix:$matrixVersion"
  compileOnly groovy
  compileOnly "org.apache.groovy:groovy-json:$groovyVersion"

  testImplementation groovy
  testImplementation "org.apache.groovy:groovy-json:$groovyVersion"
  testImplementation "se.alipsa.groovy:matrix:$matrixVersion"
  testImplementation 'org.junit.jupiter:junit-jupiter-api:5.10.0'
  testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.10.0'
  testImplementation 'se.alipsa.groovy:matrix-datasets:1.0.3-SNAPSHOT'
}

test {
  testLogging.showStandardStreams = true
  useJUnitPlatform()
}

//Maven Central uploads
task javadocJar(type: Jar, dependsOn: groovydoc) {
  archiveClassifier.set('javadoc')
  from groovydoc.destinationDir
}


task sourcesJar(type: Jar, dependsOn: classes) {
  archiveClassifier.set('sources')
  from sourceSets.main.allSource
}

nexusPublishing {
  repositories {
    sonatype()
  }
}

publishing {
  publications {
    maven(MavenPublication) {
      from components.java
      artifact(javadocJar)
      artifact(sourcesJar)
      pom {
        name = 'Groovy Matrix Json'
        description = "${project.description}"
        url = "https://github.com/Alipsa/matrix-json"
        licenses {
          license {
            name = 'MIT License'
            url = 'https://raw.githubusercontent.com/Alipsa/matrix-json/master/LICENSE'
          }
        }
        developers {
          developer {
            id = 'perNyfelt'
            name = 'Per Nyfelt'
          }
        }
        scm {
          url = 'https://github.com/Alipsa/matrix-json/tree/master'
          connection = 'scm:git:https://github.com/Alipsa/matrix-json.git'
          developerConnection = 'scm:git:https://github.com/Alipsa/matrix-json.git'
        }
      }
    }
  }
}

signing {
  if (project.properties['signing.keyId'] != null) {
    project.logger.lifecycle("Signing artifacts...")
    sign publishing.publications.maven
  } else {
    project.logger.lifecycle("signing.keyId is not defined, skipping signing of artifacts...")
  }
}

def isNonStable = { String version ->
  def stableKeyword = ['RELEASE', 'FINAL', 'GA'].any { it -> version.toUpperCase().contains(it) }
  def regex = /^[0-9,.v-]+(-r)?$/
  return !stableKeyword && !(version ==~ regex)
}
// https://github.com/ben-manes/gradle-versions-plugin
tasks.named("dependencyUpdates").configure {
  resolutionStrategy {
    componentSelection {
      all {
        if (isNonStable(it.candidate.version) && !isNonStable(it.currentVersion)) {
          reject('Release candidate')
        }
      }
    }
  }
}